
						关键字
import keyword
>>> keyword.kwlist
['False', 'None', 'True', 'and', 'as', 'assert', 'break',
 'class', 'continue', 'def', 'del', 'elif', 'else', 'except', 
 'finally', 'for', 'from', 'global', 'if', 'import', 'in', 'is', 
 'lambda', 'nonlocal', 'not', 'or', 'pass', 'raise', 'return', 'try',
 'while', 'with', 'yield']
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
						字符串案例
 
str='123456789'
print(str)                 # 输出字符串
print(str[0:-1])           # 输出第一个到倒数第二个的所有字符
print(str[0])              # 输出字符串第一个字符
print(str[2:5])            # 输出从第三个开始到第五个的字符
print(str[2:])             # 输出从第三个开始后的所有字符
print(str[1:5:2])          # 输出从第二个开始到第五个且每隔一个的字符（步长为2）
print(str * 2)             # 输出字符串两次
print(str + '你好')         # 连接字符串
print('------------------------------')
print('hello\nrunoob')      # 使用反斜杠(\)+n转义特殊字符
print(r'hello\nrunoob')     # 在字符串前面添加一个 r，表示原始字符串，不会发生转义
						
						
						输出
				{
				123456789
				12345678
				1
				345
				3456789
				24
				123456789123456789
				123456789你好
				------------------------------
				hello
				runoob
				hello\nrunoob
				}





										不换行
										
							print( x, end=" " )#不换行
							print( y, end=" " )#不换行
						
	






												import
	
	在 python 用 import 或者 from...import 来导入相应的模块。
	将整个模块(somemodule)导入，格式为： import somemodule
	从某个模块中导入某个函数,格式为： from somemodule import somefunction
	从某个模块中导入多个函数,格式为： from somemodule import firstfunc, secondfunc, thirdfunc											
	将某个模块中的全部函数导入，格式为： from somemodule import *
	
						import sys
					print('================Python import mode==========================')
					print ('命令行参数为:')
					for i in sys.argv:
						print (i)
					print ('\n python 路径为',sys.path)
	
	
	
					from sys import argv,path  #  导入特定的成员
					print('================python from import===================================')
					print('path:',path) # 因为已经导入path成员，所以此处引用时不需要加sys.path
	
	
	
	
	
											
	Python 使用反斜杠 \ 转义特殊字符，如果你不想让反斜杠发生转义，可以在字符串前面添加一个 r，表示原始字符串：
	>>> print('Ru\noob')
	Ru
	oob
	>>> print(r'Ru\noob')
	Ru\noob
	>>>
	
	
	

--------------------------------------------List（列表）----------------------------------------------	
											
													
				新列表名=sorted(原列表名)
				>>>print(原列表名)
				原列表名
				>>>print(新列表名)
				新列表名#降序排列小到大
											
											
						加号 + 是列表连接运算符，星号 * 是重复操作
								list = [ 'abcd', 786 , 2.23, 'runoob', 70.2 ]
								tinylist = [123, 'runoob']

								print (list)            # 输出完整列表
								print (list[0])         # 输出列表第一个元素
								print (list[1:3])       # 从第二个开始输出到第三个元素
								print (list[2:])        # 输出从第三个元素开始的所有元素
								print (tinylist * 2)    # 输出两次列表
								print (list + tinylist) # 连接列表	
						输出
								['abcd', 786, 2.23, 'runoob', 70.2]
								abcd
								[786, 2.23]
								[2.23, 'runoob', 70.2]
								[123, 'runoob', 123, 'runoob']
								['abcd', 786, 2.23, 'runoob', 70.2, 123, 'runoob']
	
								list 是从0开始引导列表到无限，所以T123才从【1；3】开始
		
				--------------------------------排序----------------------------------
		
				
							列表名.sort(				)
										 reverse=True	  #降序小到大				
										 reverse=False	  #升序大到小
		
				-------------------------------列表增加----------------------------------		
		
		
						原列表名.addeng(添加)#在列表末尾添加一个元素
						原列表名.extend(添加)#在列表末尾至少添加一个元素
						原列表名.insert(位置,添加)#在列表的任意位置添加一个元素
						原列表名.切片:	#在列表的任意位置至少添加一个元素
										也就是原先有个列表1，新建个列表2使用
										>>>lst[开头:结尾]=lst3
										讲lst3代替lst的选择的开头到结尾
		
		
				-------------------------列表内数值转换及删除：---------------------------	
		
		
									>>> a = [1, 2, 3, 4, 5, 6]
									>>> a[0] = 9
									>>> a[2:5] = [13, 14, 15]
									>>> a
									[9, 2, 13, 14, 15, 6]
									>>> a[2:5] = []   # 将对应的元素值设置为 []
									>>> a
									[9, 2, 6]
							注意：
									1、List写在方括号之间，元素用逗号隔开。
									2、和字符串一样，list可以被索引和切片。
									3、List可以使用+操作符进行拼接。
									4、List中的元素是可以改变的。
									
							例子：
								输入字符串，1,2,3输出3,2,1
								def reverseWords(input):
										# 通过空格将字符串分隔符，把各个单词分隔为列表	
								inputWords = input.split(" ")
										# 翻转字符串
										# 假设列表 list = [1,2,3,4],  
										# list[0]=1, list[1]=2 ，而 -1 表示最后一个元素 list[-1]=4 ( 与 list[3]=4 一样)
										# inputWords[-1::-1] 有三个参数
										# 第一个参数 -1 表示最后一个元素
										# 第二个参数为空，表示移动到列表末尾
										# 第三个参数为步长，-1 表示逆向
								inputWords=inputWords[-1::-1]
										# 重新组合字符串
								output = ' '.join(inputWords)
							
								return output
							 
								if __name__ == "__main__":
									input = 'I like runoob'
									rw = reverseWords(input)
									print(rw)
					
				
				
-------------------------------------------字典----------------------------------------------				
				
				scores={ '@@':***,     }#@@就似名字***是学号
				变量  =dict(	name='jack' ,age=20	)
				变量  =()#空字典
				
				
				
				-----------------------------输出---------------------------				
				
				print(scores[ '' ])
				print(scores.get(''))
				
				
				-----------------------------判断---------------------------				
				
				例子：	scores={'张三':100,'李四':98,'王五':45}
						print('张三' in  scores)
						print('张三' not in scores)
				
				输出:	True
						False
				
				
				-----------------------------删除---------------------------			
				
					del scores['要删除的']
				
				
				-----------------------------增加---------------------------
				
					scores['要增加的名字等等']=数值
				
				
				
				----------------------------查找类型--------------------------
					
					变量	=scores.keys()# 赋值所有key给变量
								print（变量）
						
							=scores.values()
							
							=scores.item()
					
					
					
					
				
				
				
				
				
				
				
				
				
				
				

	